import sys
import os
import getopt
import flightFeature 
import xml.etree.cElementTree as ET
import datetime

class ReadKML:
    """
    manipulate KML file format
    
    """
    debug = False

    def __init__(self):
        self.dataRaw = []
        self.ff = flightFeature.FlightFeature()
        self.myFile = ""
        print(" ready for read KML file")

    def setFile(self, f):
        #set KML file name to parse
        self.myFile = f
        if ReadKML.debug:
            print( " myfile " + self.myFile )

    def strip_namespace_inplace(self, etree, namespace=None,remove_from_attr=True):
        if namespace==None: # all namespaces
            for elem in etree.getiterator():
                tagname = elem.tag
                print( "tagname="+tagname )
                if tagname[0]=='{':
                    elem.tag = tagname[ tagname.index('}',1)+1:]
                    #if ReadKML.debug:
                        #print( " elem.tag=" + elem.tag)
                if remove_from_attr:
                    to_delete=[]
                    to_set={}
                    for attr_name in elem.attrib:
                        if attr_name[0]=='{':
                            old_val = elem.attrib[attr_name]
                            to_delete.append(attr_name)
                            attr_name = attr_name[attr_name.index('}',1)+1:]
                            to_set[attr_name] = old_val
                    for key in to_delete:
                        elem.attrib.pop(key)
                        if ReadKML.debug:
                            print(" remove key : " + key)

                    elem.attrib.update(to_set)


    def proced(self, avgSpeed):
        #read te KML file and populate the dataRow and FlightFeature properties
        tree = ET.ElementTree(file=self.myFile)
        self.strip_namespace_inplace(tree, namespace=None,remove_from_attr=True)
        dat_lst = []
        for trkpt in tree.iter('LineString'):
            #Get position and altitude    
            pts = trkpt.find('coordinates').text
            pts_lstr = pts.lstrip()
            pts_splt = pts_lstr.split()
            for xyz in pts_splt:
                xyz_splt = xyz.split(',')
                dat_lst.append([float(xyz_splt[0]),float(xyz_splt[1]),float(xyz_splt[2]), avgSpeed])

        self.dataRaw = dat_lst
        if ReadKML.debug:
            for st in self.dataRaw:
                print(" dataRaw : " , st[0], st[1], st[2], st[3] )
    
    def procedSDVFR(self):
        #Read the KML file generated by SDVFR, retrieve Speed and coordinates
        #return datas list
        dat_lst = []
        #set the namespace of XML file to parse
        ns = {'kml': 'http://www.opengis.net/kml/2.2'}
        #Read the KML file generated by SDVFR, retrieve Speed and coordinates
        tree = ET.ElementTree(file=self.myFile)
        #get date end airport which are in 'name' tag 
        kname = tree.find("kml:Document/kml:name", ns)
        if len(kname.text) > 15:
            self.ff.date = datetime.date(year=int(kname.text[6:10]), month=int(kname.text[3:5]), day=int(kname.text[0:2]))
            self.ff.time = kname.text.split()[4][1:6]
            self.ff.AirportFrom = kname.text.split()[3]
        
        if ReadKML.debug:
            print(self.ff)
            
        #parse xml file to retreive speed and coordinates
        kFolders = tree.findall("kml:Document/kml:Folder",ns)
        if (kFolders != None):
            for folder in kFolders:
                kname = folder.find("kml:name",ns)
                if (kname != None):
                    if (kname.text == "Points"):
                        #if we are here : <kml><Document><Folder><name>Points</name>
                        #then we are in the good folder
                        #So for each <Placemark>
                        for tt in folder.findall("kml:Placemark", ns):
                            kv = tt.find("kml:name",ns)
                            #get the speed 
                            speed=100
                            if ( kv != None):
                                v=kv.text.split()
                                if ( len(v) > 3 ):
                                    speed=v[2]
                            #and get coordonates
                            coord = tt.find("kml:Point/kml:coordinates",ns)
                            if (coord != None):
                                xyz_splt = coord.text.split(',')
                                dat_lst.append([float(xyz_splt[0]),float(xyz_splt[1]),float(xyz_splt[2]), speed])

                self.dataRaw = dat_lst
        if ReadKML.debug:
            for st in self.dataRaw:
                print(" dataRaw : " , st[0], st[1], st[2], st[3] )
            print( " total number of points : ", len(self.dataRaw))                              

        

if __name__ == "__main__":
    
    input_file = ""
    try:
        opts, args = getopt.getopt(sys.argv[1:], "i:", ["input="])
    except getopt.GetoptError:
        print(sys.argv[0] + ": invalid option")
        sys.exit(2)
    for opt, arg in opts:
        print("opt=" + opt + " , arg="+arg)
        if opt in ("-i","--input"):
            input_file = arg
    
    if (input_file == ""):
        print(sys.argv[0] + ": must specify arguments")
        sys.exit(1)
    
    ReadKML.debug = True
    a = ReadKML()
    a.setFile(input_file)
    a.procedSDVFR()

